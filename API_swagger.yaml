swagger: "2.0"
info:
  description: "Site de gestion de séries, permettant aux utilisateurs d'avoir un suivi des épisodes \"à voir\" et \"vu\" des séries qu'ils ont sélectionées"
  version: "1.0.0"
  title: "Swagger OmegaSeries"
  
host: "omega-series"
basePath: "/"

tags:
- name: "user account"
  description: "Operations about user account"
- name: "series"
  description: "Operations about series"
- name: "serie"
  description: "Operations about a serie"
- name: "episode"
  description: "Operations about a episode"

  
schemes:
- "https"
- "http"

paths:
  /user:
    post:
      tags:
      - "user account"
      summary: "Create a user account"
      description: "Permit to a new user to create a account"
      operationId: "createUserAccount"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user account object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "user account successfully created"
  /user/login:
    get:
      tags:
      - "user account"
      summary: "Logs user to his/her account on the system"
      description: "Permit to a registres user to connect to his/her account"
      operationId: "loginUserAccount"
      parameters:
      - name: "username/email"
        in: "query"
        description: "The username/email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "User login successfully"
        400:
          description: "Invalid username/password supplied"
  /user/{userId}:
    put:
      tags:
      - "user account"
      summary: "Update user account"
      description: "Permit to the logged in user to modify his/her account"
      operationId: "updateUserAccount"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "userId of account to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user id supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user account"
      summary: "Delete user account"
      description: "Permit to the logged in user to delete his/her account"
      operationId: "deleteUserAccount"
      parameters:
      - name: "userId"
        in: "path"
        description: "userId of account to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid user id supplied"
        404:
          description: "User not found"
  /series/episodesSeen:
    get:
      tags:
      - "series"
      summary: "Return the id of episodes marked as seen by the user"
      description: "Return the id of episodes marked as seen by the user corresponding to the user id given in parameter"
      operationId: "displayEpisodesSeen"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "Id of the user"
        required: false
        type: "string"
      responses:
        404:
          description: "Page not found bro, try again"
          
  /series/followedSeries:
    get:
      tags:
      - "series"
      summary: "Return the followed series"
      description: "Return the series followed by a user"
      operationId: "displayFollowedSeries"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "Id of the user who want to see th series that he/she follow"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid user id supplied"
  
  /serie/episodes:
    get:
      tags:
      - "serie"
      summary: "Return the available episodes of a serie"
      description: "Return the available episodes of a serie"
      operationId: "displaySerieEpisode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "serieId"
        in: "query"
        description: "Id of the serie we want to return a list of episode"
        required: true
        type: "integer"
      responses:
        400: 
          description: "Invalid serie Id supplied"
  
  /serie/unfollow:
    delete:
      tags:
      - "serie"
      summary: "Remove from followed series"
      description: "Remove a serie of the series followed by a user"
      operationId: "unfollowSerie"
      consumes:
      - "application/json"
      parameters:
      - name: "serieId"
        in: "query"
        description: "Id of the serie the user want to unfollow"
        required: true
        type: "integer"
      - name: "userId"
        in: "query"
        description: "Id of the user who want to unfollow a serie"
        required: true
        type: "integer"
      responses:
        400: 
          description: "Invalid serie/user Id supplied"
          
  /serie/follow:
    post:
      tags:
      - "serie"
      summary: "Add a followed serie"
      description: "Add a serie to the series followed by a user"
      operationId: "followSerie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "serieId"
        in: "query"
        description: "Id of the serie the user want to follow"
        required: true
        type: "integer"
      - name: "userId"
        in: "query"
        description: "Id of the user who want to follow a serie"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Created user account object"
        required: true
        schema:
          $ref: "#/definitions/Serie"
      responses:
        default:
          description: "Serie followed successfully"
          
  /serie/isFollowed:
    post:
      tags:
      - "serie"
      summary: "Verify if a user follow a serie"
      description: "Verify if the user, corresponding to the user id given in parameter, follow the serie, corresponding to the serie id given in parameter."
      operationId: "isFollowedSerie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "serieId"
        in: "query"
        description: "Id of the serie"
        required: true
        type: "integer"
      - name: "userId"
        in: "query"
        description: "Id of the user"
        required: true
        type: "integer"
      responses:
        default:
          description: "Serie is/isn't followed"
          
  /serie/countFollowers:
    post:
      tags:
      - "serie"
      summary: "Return the number of user who follow a serie"
      description: "Return the number of user who follow the serie, corresponding to the serie id given in parameter."
      operationId: "countFollowersSerie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "serieId"
        in: "query"
        description: "Id of the serie"
        required: true
        type: "integer"
      responses:
        default:
          description: "Number of user who follow the serie"
    
  /episode/mark:
    put:
      tags:
      - "episode"
      summary: "Mark an episode"
      description: "Mark an episode of a serie followed by a user as seen"
      operationId: "markEpisode"
      produces:
      - "application/json"
      parameters:
      - name: "serieId"
        in: "query"
        description: "Id of the serie the user want to mark an episode of"
        required: true
        type: "integer"
      - name: "userId"
        in: "query"
        description: "Id of the user who want to mark an episode"
        required: true
        type: "integer"
      - name: "episodeId"
        in: "query"
        description: "Id of the episode the user want to mark"
        required: true
        type: "integer"
      responses:
        default:
          description: "Episode marked successfully"
        400:
          description: "Invalid user/episode id supplied"
          
  /episode/unmark:
    put:
      tags:
      - "episode"
      summary: "Unmark an episode"
      description: "Unmark an episode of a serie followed by a user"
      operationId: "unmarkEpisode"
      produces:
      - "application/json"
      parameters:
      - name: "serieId"
        in: "query"
        description: "Id of the serie the user want to unmark an episode of"
        required: true
        type: "integer"
      - name: "userId"
        in: "query"
        description: "Id of the user who want to unmark an episode"
        required: true
        type: "integer"
      - name: "episodeId"
        in: "query"
        description: "Id of the episode the user want to unmark"
        required: true
        type: "integer"
      responses:
        default:
          description: "Episode unmarked successfully"
        400:
          description: "Invalid user/episode id supplied"
    
definitions:
    
    User:
      type: "object"
      properties:
        username:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        
      xml:
        name: "User"
        
    Information:
      type: "object"
      properties:
        id: 
          type: "integer"
          format: "int64"
        name:
          type: "string"
        type: 
          type: "string"
        genre: 
          type: "array"
          items:
            type: "string"
        status: 
          type: "string"
        start: 
          type: "string"
        officialSite: 
          type: "string"
        urlMediumImage: 
          type: "string"
        urlOriginalImage: 
          type: "string"
        rate:           
          type: "integer"
          format: "int64"
        summary: 
          type: "string"
        network: 
          type: "string"
        countryName: 
          type: "string"
        countryCode: 
          type: "string"
      
      xml:
        name: "Information"
    
    Episode:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        outDate:
          type: "string"
        seasonNumber:
          type: "integer"
          format: "int64"
        episodeNumber:
          type: "integer"
          format: "int64"
        urlMediumImage:
          type: "string"
        urlOriginalImage:
          type: "string"
        summary:
          type: "string"
        runtime:
          type: "integer"
          format: "int64"
          
      xml:
        name: "Episode"
          
        
    Season:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        numberSeasonInshow:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        nbEpisode:
          type: "integer"
          format: "int64"
        episodes:
          type: "array"
          items:
            $ref: "#/definitions/Episode"
        urlMediumImage:
          type: "string"
        urlOriginalImage:
          type: "string"
        summary:
          type: "string"
            
      xml:
        name: "Season"
        
    ActorCharacter:
      type: "object"
      properties:
        actorId:
          type: "integer"
          format: "int64"
        actorName:
          type: "string"
        actorCountryName:
          type: "string"
        actorCountryCode:
          type: "string"
        actorSexe:
          type: "string"
        actorUrlMediumImage:
          type: "string"
        actorUrlOriginalImage:
          type: "string"
        characterId:
          type: "integer"
          format: "int64"
        characterName:
          type: "string"
        characterUrlMediumImage:
          type: "string"
        characterUrlOriginalImage:
          type: "string"
      
      xml:
        name: "ActorCharacter"
        
        
    Serie:
      type: "object"
      properties:
        information:
          type: "array"
          items:
            $ref: "#/definitions/Information"
        seasons:
          type: "array"
          items:
            $ref: "#/definitions/Season"
        cast:
          type: "array"
          items:
            $ref: "#/definitions/ActorCharacter"

      xml:
        name: "Serie"

        